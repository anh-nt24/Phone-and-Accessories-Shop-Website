<style>
    @keyframes drop-in-fade-out {
        0% {
            opacity: 0;
            visibility: visible;
            transform: translate3d(0, -200%, 0);
        }

        12% {
            transform: translate3d(0, 0, 0);
        }

        20% {
            opacity: 1;
        }

        70% {
            opacity: 1;
            visibility: visible;
            transform: translate3d(0, 0, 0);
        }

        80% {
            opacity: 0;
        }

        100% {
            visibility: hidden;
            transform: translate3d(75%, 0, 0);
        }
    }

    .animate--drop-in-fade-out {
        animation: drop-in-fade-out 3.5s 0.4s cubic-bezier(.32, 1.75, .65, .91);
    }


    @-webkit-keyframes drop-in-fade-out {
        0% {
            opacity: 0;
            visibility: visible;
            -webkit-transform: translate3d(0, -200%, 0);
        }

        12% {
            -webkit-transform: translate3d(0, 0, 0);
        }

        20% {
            opacity: 1;
        }

        70% {
            opacity: 1;
            visibility: visible;
            -webkit-transform: translate3d(0, 0, 0);
        }

        80% {
            opacity: 0;
        }

        100% {
            visibility: hidden;
            -webkit-transform: translate3d(75%, 0, 0);
        }
    }

    @-moz-keyframes drop-in-fade-out {
        /* Same as above, replace -webkit- with -moz- */
    }

    @-o-keyframes drop-in-fade-out {
        /* Same as above, replace -webkit- with -o- */
    }

    @-ms-keyframes drop-in-fade-out {
        /* Same as above, replace -webkit- with -ms- */
    }

    .flash {
        display: block;
        position: fixed;
        bottom: 20px;
        right: 25px;
        width: 350px;
        padding: 20px 25px 20px 85px;
        font-size: 16px;
        font-weight: 400;
        color: #ff4d4d;
        background-color: #FFF;
        border: 2px solid #ff4d4d;
        border-radius: 2px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.25);
        opacity: 0;
    }

    .flash.success {
        border-color: #51a626 !important;
        color: #51a626 !important;
    }

    .flash__icon.success {
        background: #51a626 !important;
    }

    .flash__icon {
        position: absolute;
        top: 50%;
        left: 0;
        width: 1.8em;
        height: 100%;
        padding: 0 0.4em;
        background-color: #ff4d4d;
        color: #FFF;
        font-size: 36px;
        font-weight: 300;
        transform: translate(0, -50%);
    }

    .flash__icon .icon {
        position: absolute;
        top: 50%;
        transform: translate(0, -50%);
    }
</style>
<!-- Sale & Revenue Start -->
<div class="container-fluid pt-4 px-4">
    <div class="row g-4">
        <div class="col-sm-12 col-xl-6">
            <div class="bg-light rounded d-flex align-items-center justify-content-between p-2">
                <div class="container" style="min-height: 500px;">
                    <div class="row mt-2">
                        <div class="d-md-flex col-12">
                            <input name="sdt" id="search-cus" class="form-control border-0" type="search" placeholder="Search a customer">
                            <button onclick="searchCustomer()" class="btn ms-2 btn-info"> Search </button>
                        </div>
                    </div>
                    <div class="row mt-4">
                        <span id="customer-result">Customer: _________________ </span>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th scope="col">#</th>
                                        <th scope="col" style="width: 50%">Product</th>
                                        <th scope="col">Quantity</th>
                                        <th scope="col">Price</th>
                                        <th scope="col">Del</th>
                                    </tr>
                                </thead>
                                <tbody id="table">
                                </tbody>
                                <tbody id="total-order">
                                    <tr style="font-weight: bold">
                                        <td colspan="2">Total (+VAT)</td>
                                        <td>0</td>
                                        <td id="total-price">0</td>
                                        <td></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="flash" id="flashMessage"></div>
                        <div class="col-12">
                            <button style="float: right;" id="order" onclick="order()" disabled="true" class="btn btn-warning">Place an order</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-sm-12 col-xl-6">
            <div class="bg-light rounded d-flex align-items-center justify-content-between p-2">
                <div class="container" style="min-height: 500px;">
                    <div class="row mt-2">
                        <div class="d-md-flex col-10 ms-2">
                            <input id="search-prod" class="form-control border-0" type="search" placeholder="Search a product">
                            <button type="button" onclick="search()" class="btn btn-info ms-2">Search</button>
                            <button type="button" onclick="getAllProducts()" class="btn btn-info ms-2">All</button>
                        </div>
                    </div>
                    <div class="row mt-3" id="products">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal" tabindex="-1" role="dialog" id="cashPaymentModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cash Payment</h5>
            </div>
            <div class="modal-body">
                <table class="table">
                    <tbody>
                        <tr>
                            <td>Total Price</td>
                            <td id="totalPrice"></td>
                        </tr>
                        <tr>
                            <td>Cash Tendered</td>
                            <td id="cashTendered"><input id="cashTenderedInp" onkeyup="updateChange(this)" style="width: 100px" type="number">VND</td>
                        </tr>
                        <tr>
                            <td>Change</td>
                            <td style="font-weight: bold" id="change"></td>
                        </tr>
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button style="width: 45%;" type="button" onclick="payment()" class="btn btn-warning">Process Payment</button>
                <button style="width: 45%;" type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" crossorigin="anonymous"></script>

<script src="/js/jwt.js"></script>
<script>
    document.title = 'POS - Homepage'


    const jwt = getJwtCookie();
    const headers = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${jwt}`
    }

    const search = () => {
        const input = document.getElementById('search-prod').value;
        fetch('/api/product/search/' + input, {
            method: 'GET',
            headers: headers
        })
        .then(response => {
            if (response.ok) {
                return response.json()
            }
        })
        .then(data => {
            const products = data.data;
            const productDisplay = document.getElementById('products');
            if (products.length == 0) {
                productDisplay.innerHTML = `
                    <span style="color: red">Product not found<span>
                `;
            } else {
                let html = '';
                products.forEach((product, index) => {
                    html += `
                        <div class="py-2 pb-3 col-5 m-2 d-flex justify-content-between flex-column" style="background-color: #fff">
                            <img style="align-self: center;" width="100px" height="100px" src="/images/product.png" alt="">
                            <div class="mt-3">
                                <h6>${product.ProductName}</h6>
                                <span style="color: red; font-weight: bold">${product.RetailPrice} VND</span>
                                <div class="buttons mt-2">
                                    <button onclick="addToOrder('${product._id}', '${product.RetailPrice}', '${product.ProductName}')" class="btn btn-warning"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                    <button class="btn btn-info px-3"><i class="fas fa fa-info"></i></button>
                                </div>
                            </div>
                        </div>
                    `
                });
                productDisplay.innerHTML = html;
            }
        })
    }

    const showCashPaymentModal = () => {
        $('#cashPaymentModal').modal('show');
    }

    const order = () => {
        const totalPrice = document.getElementById('total-price').textContent;
        document.getElementById('totalPrice').textContent = totalPrice + ' VND';
        showCashPaymentModal();
    }


    const updateChange = (input) => {
        const totalPrice = parseFloat(document.getElementById('totalPrice').textContent.replace(' VND', ''));
        const cashTendered = parseFloat(input.value);
        const change = cashTendered - totalPrice;
        document.getElementById('change').textContent = change + ' VND'
    }

    const payment = () => {
        const sdt = document.getElementById('customer-result').getAttribute("sdt");
        let orderDetails = [];

        const orderProducts = document.querySelectorAll('.order-products');
        orderProducts.forEach(product => {
            const pId = product.getAttribute('data-id');
            const q = product.querySelector('.quantity').textContent;
            orderDetails.push({
                "ProductID": pId,
                "Quantity": parseInt(q)
            });

        })
        const data = {
            "PhoneNumber": sdt,
            "OrderDetails": orderDetails,
        }
        $('#cashPaymentModal').modal('hide');
        fetch('/api/order/product', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(data)
        })
        .then(response => {
            if (!response.ok) {
                type = 'failed';
                message = 'The order has been paid failed';
                throw new Error(data);
            }
            return response.json();
        })
        .then(data => {
            const cashTendered = document.querySelector('#cashTenderedInp').value;
            const paymentData = {
                "AmountOfMoneyGivenByCustomer": parseInt(cashTendered) ,
                "PhoneNumber": sdt
            }
            fetch('/api/order/payment', {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(paymentData)
            })
            .then(response => {
                const flash = document.querySelector('#flashMessage');
                let type = 'success';
                let message = 'The order has been paid successfully';
                if (!response.ok) {
                    type = 'failed';
                    message = 'Customer created failed'
                    throw new Error(data);
                }
                let html = `
                    <div class="flash__icon ${type}">
                        ${type === 'success' ?
                            '<i class="icon fa fa-check"></i>' :
                            '<i class="icon fa fa-times-circle-o"></i>'
                        }
                    </div>
                    <p>${message}</p>
                `;

                flash.innerHTML = html;
                flash.classList.add(type);
                flash.classList.add("animate--drop-in-fade-out");
                // Remove the animation class after 3 seconds (adjust as needed)
                setTimeout(function () {
                    flash.classList.remove("animate--drop-in-fade-out");
                }, 1000);
                return response.json();
            })
            .then(data => {
                const orderId = data.data._id;
                const endpoint = '/api/order/printInvoice/' + orderId;
                fetch(endpoint, {
                    method: 'GET',
                    headers: headers
                })
                .then(response => response.blob())
                .then(blob => {
                    const blobUrl = URL.createObjectURL(blob);

                    const link = document.createElement('a');
                    link.href = blobUrl;
                    link.download = `${orderId}.pdf`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                })
                .catch(error => console.error('Error downloading PDF:', error));
            })
        })
    }

    const searchCustomer = () => {
        const sdt = document.querySelector('#search-cus').value;

        fetch('/api/customer/info/'+sdt, {
            method: 'GET',
            headers: headers,
        })
        .then(response => {
            if (!response.ok) {
                if (response.status === 404) {
                    document.getElementById('customer-result').innerHTML = `
                        Customer not found. Click <a href="/customer">here</a> to add new
                    `;
                }
                throw new Error('Customer added failed');
            }
            return response.json();
        })
        .then((data) => {
            const customer = data.data.Name;
            document.getElementById('customer-result').innerHTML = `
                Customer: ${customer}
            `;
            document.getElementById('customer-result').setAttribute("sdt", data.data.PhoneNumber);
        });
    }


    const getAllProducts = () => {
        fetch('/api/product', {
            method: 'GET',
            headers: headers,
        })
            .then(response => {
                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.replace('/login');
                    }
                    throw new Error('Customer added failed');
                }
                return response.json();
            })
            .then((data) => {
                const products = data.data;
                const r = document.querySelector('#products');
                let html = '';
                products.forEach((product, index) => {
                    html += `
                        <div class="py-2 pb-3 col-5 m-2 d-flex justify-content-between flex-column" style="background-color: #fff">
                            <img style="align-self: center;" width="100px" height="100px" src="/images/product.png" alt="">
                            <div class="mt-3">
                                <h6>${product.ProductName}</h6>
                                <span style="color: red; font-weight: bold">${product.RetailPrice} VND</span>
                                <div class="buttons mt-2">
                                    <button onclick="addToOrder('${product._id}', '${product.RetailPrice}', '${product.ProductName}')" class="btn btn-warning"><i class="fa fa-plus" aria-hidden="true"></i></button>
                                    <button class="btn btn-info px-3"><i class="fas fa fa-info"></i></button>
                                </div>
                            </div>
                        </div>
                    `
                });
                r.innerHTML = html;
            });
    }

    getAllProducts();

    const addToOrder = (id, price, name) => {
        const table = document.querySelector('#table');
        const trElement = table.querySelector(`tr[data-id="${id}"]`);
        var stt = table.querySelectorAll('tr').length + 1;
        if (trElement) {
            const quantity = parseInt(trElement.querySelector('td:nth-child(3)').textContent);
            trElement.querySelector('td:nth-child(3)').textContent = quantity + 1;
            updateLastRow();
        } else {
            let html = `
                <tr class="order-products" data-id="${id}">
                    <th scope="row">${stt}</th>
                    <td>${name}</td>
                    <td class="quantity">1</td>
                    <td>${price}</td>
                    <td><button onclick="removeItem(this)" class="btn btn-danger py-1 px-2"><i class="fa fa-trash"></i></button></td>
                </tr>
            `;
            table.innerHTML += html;
        }
    }

    const removeItem = (button) => {
        const trElement = button.closest('tr');
        trElement.remove();
        updateLastRow();
    };

    function updateLastRow() {
        var tbodyOrder = document.getElementById('table');
        var tbodyTotal = document.getElementById('total-order');

        var trTotal = tbodyTotal.querySelector('tr');
        var trOrder = tbodyOrder.querySelectorAll('tr');

        var totalQuantity = 0;
        var totalPrice = 0;

        for (var i = 0; i < trOrder.length; i++) {
            var quantity = parseInt(trOrder[i].querySelector('td:nth-child(3)').textContent);
            var price = parseFloat(trOrder[i].querySelector('td:nth-child(4)').textContent);

            trOrder[i].querySelector('th').textContent = i+1;

            totalQuantity += quantity;
            totalPrice += quantity * price;
        }

        const od = document.getElementById('order');
        if (totalQuantity == 0) {
            od.setAttribute("disabled", true);
        } else {
            od.removeAttribute("disabled");
        }

        trTotal.querySelector('td:nth-child(2)').textContent = totalQuantity;
        trTotal.querySelector('td:nth-child(3)').textContent = totalPrice;
    }

    var observer = new MutationObserver(updateLastRow);
    observer.observe(document.getElementById('table'), { childList: true });

</script>